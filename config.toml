baseURL = 'http://example.org/'
languageCode = 'en-us'
title = 'My New Hugo Site'
theme = 'hugo-templating-primer'

# PROJECT FILE STRUCTURE NOTES
# archetypes --> What is this directory for? --> Default frontmatter that your pages use 
# content --> Where we store out sites content files via Markdown files
#  contentType1/
#    _index.md --> For content type home pages / list pages Hugo uses the _index.md convention
#    contentType1_SubPage1.md --> You can include subpages for your base content types e.g. blog posts, image galleries 
#    contentType1_SubPage2.md
#    contentType1_SubPage3.md
#  standAloneContent.md --> You can include stand alone content pages
# data --> What is this directory for?
# layouts --> Where you store html templates that define the document structure of your site
#  layouts
#    _default/
#      baseof.html
#      list.html --> Template for a sub page e.g. a blog post
#      single.html --> Template for a stand alone page e.g. About Me
#    partials/
#      component.html
# resources
# static/ --> For your static assets (CSS, JavaScript, Images)
#  css/
#    styles.css
#  js/
#    scripts.js
# themes --> For your themes files to make your sites design and core features shareable

# ADDITIONAL NOTES
# index.html in Layouts to get started
# Routing is file based via markdown files in Content
# We can create static pages via `_default/` folder in Layouts
# We can create `partials/` via a folder in Layouts
# 	- Partial syntax --> {{- partial "[foo].html" -}}
# We can create blocks of content via -- {{- block [bar] . }}{{- end }}
# 	- There must be a corresponding file named [bar] with content for the content block to renders
# Again file-based routing. We can nest folders inside `content` (e.g. blog/)
# 	- We can to create _index.html to represent the nested content's home page
# 	- Then we can use the Hugo CLI to create content files
# Pages are managed via frontmatter (via YAML, JSON, TOML)
# Range function --> {{ range .[foo].[bar].[methodName] }} {{ end }} --> Allows looping over objects
# Variable Access --> {{ .[foo] }} (be aware that that scope matters. Top-Level scope is global. Function scope is local.
# Important variables {{ .Title }}, {{ .Content }}
# Shortcodes --> html components you can use in Markdwon files
# You can create rss.xml files in your layouts/_default folder to create a rss feed
# You can create file specific markdown using `_fileName.md` files in the archertypes folder
# Taxonomies allow you to group content. Controlled via Frontmatter
#   - `categories` and `tags` are the default taxonomies. You can create custom taxonomies.
#   -  configure [taxonomies] in `config.toml` file
#  Add index.html to create a custom home page 
#  You can override templates by creating layout folders that correspond to content folders and inserting list and single templates
#  `baseof.html` is a special template that all other templates are based on
#  Blocks allow you to define sections of content and easily override content in other templates
# Variable access is only allowed in the layouts folder
# Common Variables:
#  {{ .Title }}
#  {{ .Date }}
#  {{ .URL }}
# You can create custom variables in your front matter that are accessible in your templates
#  {{ .Params.foo}} where foo is a front matter variable 
# You can create custom variables in your code that are accessible in your templates
#  {{ $myVarName := foo}} where `$myVarNam` is a variable declaration and `foo` is a value 
# Hugo exposes functions. They are only available in the layouts folder.
# Function syntax --> {{ funcName param1 param2}}
# Commom functions 
#   - {{ truncate number string }} will truncatr a string and a `...` to the end
#   - {{ range .Object }} {{.Title}} {{ end }} will loop over the values of the object
# Hugo allow for conditional statements using the syntax 
#  - {{ if operator conditon }} {{ else }} {{ end }}
#  - {{ if operator conditon }} {{ else if condition }} {{ else if condition }} {{ end }}
# Wrap the conditional in parenthesis when using the `not` operator
#  - {{ if operator not (conditon) }} {{ else }} {{ end }}
# Wrap the both conditionals in parenthesis when using the `and` and `or` operator
#  - {{ if operator and (lt conditon1) (lt conditon2) }} {{ else }} {{ end }} -- note you can use operators in your code
#  - {{ if operator or (lt conditon1) (lt conditon2) }} {{ else }} {{ end }} -- note you can use operators in your code
# Data files static files whose data you can access in your templates. Very similar to the fake backend Veams used
# You can access data file data using the syntax {{ .Site.Data.dataFileName }}
# You can create components, which Hugo call partials via the partials folder
# The syntax to access partials in templates is {{ partial "component" . }}
# The `.` is important as it gives your component access to all variables available on the site e.g. {{ .Title }}, {{ .Date }}, {{ .Url }}
# You can create custom variables and pass them into your partial snippet via dictionaries 
#  - For example --> {{ partial "component" dict (myCustomKey myCustomValue)}}
# You can create custom shortcodes by creating a shortcodes directory --> shortcodes/ --> spelling is key
# Shortcodes are just templates e.g. myShortcode.html and you can access them in markdown files via {{< myShortcode >}}
# Shortcodes can take variables e.g. --> {{< myShortcode  color="blue">}}
# Access shortcode variables using the `.Get` function 
#  - e.g. style="color:{{ .Get `color`}}" note the use of backticks to use quotes in quotes 
# You can also positional variables which are like switch statements that you can access via index
# - e.g. {{< myShortcode blue >}} -->  style="color:{{ .Get 0 }}"
# You can turn shortcodes into blocks {{< myShortcode >}} Do something {{< /myShortcode >}} and access "Do something" via {{ .Inner }}